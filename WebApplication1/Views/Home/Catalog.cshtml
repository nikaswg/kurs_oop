@model List<DataLayer.BookModel>
@{
    ViewData["Title"] = "Каталог книг";
}

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary: #6a11cb;
            --secondary: #2575fc;
            --text: #2c3e50;
            --light-text: #7f8c8d;
            --background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            --error: #e74c3c;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: var(--background);
            color: var(--text);
            min-height: 100vh;
        }

        /* Навигация */
        nav {
            background: white;
            padding: 1rem 2rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .nav-logo {
            font-size: 1.8rem;
            font-weight: bold;
            color: var(--primary);
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
        }

            .nav-links a {
                color: var(--text);
                text-decoration: none;
                font-weight: 600;
                transition: all 0.3s;
            }

                .nav-links a:hover {
                    color: var(--primary);
                }

        .user-menu {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }

        /* Основное содержимое */
        .container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        h1 {
            color: var(--primary);
            font-size: 2rem;
        }

        .search-bar {
            display: flex;
            gap: 0.5rem;
        }

        .search-input {
            padding: 0.5rem 1rem;
            border: 2px solid #e0e0e0;
            border-radius: 30px;
            width: 300px;
            transition: all 0.3s;
        }

            .search-input:focus {
                border-color: var(--primary);
                outline: none;
                box-shadow: 0 0 0 3px rgba(106,17,203,0.1);
            }

        .search-btn {
            padding: 0.5rem 1.5rem;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            border: none;
            border-radius: 30px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s;
        }

            .search-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            }

        /* Карточки книг */
        .books-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 2rem;
        }

        .book-card {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            display: flex;
            flex-direction: column;
        }

            .book-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 25px rgba(0,0,0,0.2);
            }

        .book-cover {
            height: 300px;
            background-size: cover;
            background-position: center;
            background-color: #f5f5f5;
            display: flex;
            align-items: flex-end;
        }

        .book-info {
            padding: 1.5rem;
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .book-title {
            font-weight: bold;
            margin-bottom: 0.5rem;
            font-size: 1.1rem;
            color: var(--text);
        }

        .book-author {
            color: var(--light-text);
            font-size: 0.9rem;
            margin-bottom: 1rem;
        }

        .book-description {
            margin-bottom: 1rem;
            font-size: 0.9rem;
            color: var(--light-text);
        }

        .book-meta {
            display: flex;
            justify-content: space-between;
            margin-top: auto;
            font-size: 0.9rem;
        }

        .book-pages {
            color: var(--light-text);
        }

        .book-year {
            color: var(--light-text);
        }

        /* Пагинация */
        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 3rem;
            gap: 0.5rem;
        }

        .page-link {
            padding: 0.5rem 1rem;
            border: 1px solid #e0e0e0;
            border-radius: 5px;
            color: var(--text);
            text-decoration: none;
            transition: all 0.3s;
        }

            .page-link:hover {
                background: #f5f5f5;
            }

            .page-link.active {
                background: linear-gradient(135deg, var(--primary), var(--secondary));
                color: white;
                border-color: transparent;
            }

        /* Футер */
        footer {
            background: white;
            padding: 2rem;
            margin-top: 3rem;
            box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
        }

        .footer-content {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .footer-links {
            display: flex;
            gap: 1.5rem;
        }

            .footer-links a {
                color: var(--light-text);
                text-decoration: none;
                transition: color 0.3s;
            }

                .footer-links a:hover {
                    color: var(--primary);
                }

        .copyright {
            color: var(--light-text);
            font-size: 0.9rem;
        }

        /* Анимации */
        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .fade-in {
            animation: fadeIn 0.6s ease-out forwards;
        }

        /* Адаптивность */
        @@media (max-width: 768px) {
            nav {
                flex-direction: column;
                gap: 1rem;
                padding: 1rem;
            }

            .nav-links {
                flex-direction: column;
                gap: 1rem;
                align-items: center;
            }

            .page-header {
                flex-direction: column;
                gap: 1rem;
                align-items: flex-start;
            }

            .search-bar {
                width: 100%;
            }

            .search-input {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <!-- Навигация -->
    <nav>
        <a href="#" class="nav-logo">
            <i class="fas fa-book-open"></i>
            <span>BookVerse</span>
        </a>

        <div class="nav-links">
            <a href="#"><i class="fas fa-home"></i> Главная</a>
            <a href="#" class="active"><i class="fas fa-book"></i> Каталог</a>
            <a href="#"><i class="fas fa-heart"></i> Избранное</a>
        </div>

        <div class="user-menu">
            <span>@Context.Session.GetString("Username")</span>
            <div class="user-avatar">
                @Context.Session.GetString("Username")?[0].ToString().ToUpper()
            </div>
        </div>
    </nav>

    <!-- Основное содержимое -->
    <div class="container">
        <div class="page-header">
            <h1>Каталог книг</h1>
            <div class="search-bar">
                <input type="text" class="search-input" placeholder="Поиск по названию или автору..." id="searchInput">
                <button class="search-btn" id="searchBtn"><i class="fas fa-search"></i></button>
            </div>
        </div>

        <!-- Сетка книг -->
        <div class="books-grid" id="booksGrid">
            @if (Model != null && Model.Any())
            {
                @foreach (var book in Model)
                {
                    <div class="book-card" onclick="window.location.href='@Url.Action("BookDetail", "Home", new { ISBN = book.ISBN })'">
                        <div class="book-cover" style="background-image: url('@book.Image')">
                            @if (book.Publication_Date.HasValue && (DateTime.Now - book.Publication_Date.Value).TotalDays < 30)
                            {
                                <span style="background: var(--primary); color: white; padding: 0.3rem 0.6rem; margin: 0.5rem; border-radius: 20px; font-size: 0.8rem;">Новинка</span>
                            }
                        </div>
                        <div class="book-info">
                            <div class="book-title">@book.Book_Name</div>
                            <div class="book-author">@book.Book_Author</div>
                            <div class="book-description">
                                @(book.Book_Description?.Length > 100 ? book.Book_Description.Substring(0, 100) + "..." : book.Book_Description)
                            </div>
                            <div class="book-meta">
                                <div class="book-pages">@book.Number_Of_Pages стр.</div>
                                <div class="book-year">@(book.Publication_Date?.Year.ToString() ?? "Год неизвестен")</div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div style="grid-column: 1 / -1; text-align: center; padding: 2rem;">
                    <p>Книги не найдены</p>
                </div>
            }
        </div>

        <!-- Пагинация -->
        <div class="pagination" id="pagination">
            <!-- Пагинация будет генерироваться JavaScript -->
        </div>
    </div>

    <!-- Футер -->
    <footer>
        <div class="footer-content">
            <div class="footer-links">
                <a href="#">О нас</a>
                <a href="#">Контакты</a>
                <a href="#">Помощь</a>
                <a href="#">Условия использования</a>
            </div>
            <div class="copyright">
                © @DateTime.Now.Year BookVerse. Все права защищены.
            </div>
        </div>
    </footer>

    <script>
        // Конфигурация пагинации
        const config = {
            itemsPerPage: 6, // Количество книг на странице
            currentPage: 1   // Текущая страница
        };

        // Инициализация при загрузке страницы
        document.addEventListener('DOMContentLoaded', function() {
            initPagination();
            setupSearch();
        });

        // Инициализация пагинации
        function initPagination() {
            const bookCards = document.querySelectorAll('.book-card');
            const totalPages = Math.ceil(bookCards.length / config.itemsPerPage);

            renderPagination(totalPages);
            showPage(config.currentPage);
        }

        // Отображение страницы
        function showPage(pageNumber) {
            const bookCards = document.querySelectorAll('.book-card');
            const startIndex = (pageNumber - 1) * config.itemsPerPage;
            const endIndex = startIndex + config.itemsPerPage;

            bookCards.forEach((card, index) => {
                if (index >= startIndex && index < endIndex) {
                    card.style.display = 'flex';
                } else {
                    card.style.display = 'none';
                }
            });

            // Обновляем активную страницу
            document.querySelectorAll('.page-link').forEach(link => {
                link.classList.remove('active');
                if (parseInt(link.textContent) === pageNumber) {
                    link.classList.add('active');
                }
            });

            config.currentPage = pageNumber;
        }

        // Рендер пагинации
        function renderPagination(totalPages) {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';

            // Кнопка "Назад"
            if (config.currentPage > 1) {
                const prevLink = document.createElement('a');
                prevLink.href = '#';
                prevLink.className = 'page-link';
                prevLink.innerHTML = '<i class="fas fa-chevron-left"></i>';
                prevLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    showPage(config.currentPage - 1);
                });
                pagination.appendChild(prevLink);
            }

            // Номера страниц
            for (let i = 1; i <= totalPages; i++) {
                const pageLink = document.createElement('a');
                pageLink.href = '#';
                pageLink.className = `page-link ${i === config.currentPage ? 'active' : ''}`;
                pageLink.textContent = i;
                pageLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    showPage(i);
                });
                pagination.appendChild(pageLink);
            }

            // Кнопка "Вперед"
            if (config.currentPage < totalPages) {
                const nextLink = document.createElement('a');
                nextLink.href = '#';
                nextLink.className = 'page-link';
                nextLink.innerHTML = '<i class="fas fa-chevron-right"></i>';
                nextLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    showPage(config.currentPage + 1);
                });
                pagination.appendChild(nextLink);
            }
        }

        // Поиск книг
        function setupSearch() {
            const searchBtn = document.getElementById('searchBtn');
            const searchInput = document.getElementById('searchInput');

            searchBtn.addEventListener('click', performSearch);
            searchInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') performSearch();
            });
        }

        function performSearch() {
            const query = document.getElementById('searchInput').value.toLowerCase();
            const bookCards = document.querySelectorAll('.book-card');

            bookCards.forEach(card => {
                const title = card.querySelector('.book-title').textContent.toLowerCase();
                const author = card.querySelector('.book-author').textContent.toLowerCase();

                if (title.includes(query) || author.includes(query)) {
                    card.style.display = 'flex';
                } else {
                    card.style.display = 'none';
                }
            });

            // Сброс пагинации после поиска
            initPagination();
        }
    </script>
</body>
</html>